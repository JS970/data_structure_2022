// source code 1.6 class representing matrix
// use class which use get_data() function to calculate different sizes of matrix
// rewrite C program code to calculate matrix using class
#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include "time.h"
#define AROWS 3
#define ACOLS 4
#define BROWS 4
#define BCOLS 5
#define CROWS 3
#define CCOLS 5

class Matrix
{
private:
	int rows, cols;
	int* data;
	int* data_index; // 급한대로 사용하긴 했는데 진짜 마음에 안든다...
public:
	Matrix(int rows_input, int cols_input)
	{
		rows = rows_input;
		cols = cols_input;

		data = NULL;
		data_index = NULL;
	}
	int get_data();
	int show_data();
	int sort_data();
	int addMatrix(Matrix&);
	int MultiplyMatrix(Matrix&, Matrix&);
};

int Matrix::get_data()
{
	data = new int;
	data_index = data;
	for (int i = 0; i < rows; i++)
	{
		for (int j = 0; j < cols; j++)
		{
			data[j] = rand() % (rows * cols);
			printf("%ld ", data[j]);
		}
		printf("\n");
		data = data + sizeof(int);
	}
	return 1;
}

int Matrix::show_data()
{
	printf("\n");
	data = data_index;
	for (int i = 0; i < rows; i++)
	{
		for (int j = 0; j < cols; j++)
			printf("%ld ", data[j]);
		printf("\n");
		data = data + sizeof(int);
	}
	printf("\n");

	return 1;
}

int Matrix::sort_data()
{

	return 1;
}

int Matrix::addMatrix(Matrix& m)
{

	return 1;
}

int Matrix::MultiplyMatrix(Matrix& m1, Matrix& m2)
{

	return 1;
}

int main(void)
{
	Matrix matrixA(AROWS, ACOLS);
	//Matrix matrixA1(AROWS, ACOLS);
	Matrix matrixB(BROWS, BCOLS);
	//Matrix matrixC(CROWS, CCOLS);

	srand(time(NULL));

	matrixA.get_data();
	matrixA.show_data();
	matrixB.get_data();
	matrixB.show_data();
	system("pause");
	return 0;
}